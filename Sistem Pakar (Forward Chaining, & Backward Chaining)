{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1ixAEY11YNgiAPpmb1faX9HGyw0xk1EWX","timestamp":1744376610233},{"file_id":"1Qvqr1JbbXTR_jIxyE3p_oFUgwroOSn19","timestamp":1744341838639}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fwaZZIkwZerw","executionInfo":{"status":"ok","timestamp":1744936115478,"user_tz":-420,"elapsed":5656,"user":{"displayName":"Muhamad Rizal","userId":"03040828489352447663"}},"outputId":"ce9adfda-ae82-4659-bbd3-b435af64dcf5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting experta\n","  Downloading experta-1.9.4-py3-none-any.whl.metadata (5.0 kB)\n","Collecting frozendict==1.2 (from experta)\n","  Downloading frozendict-1.2.tar.gz (2.6 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Collecting schema==0.6.7 (from experta)\n","  Downloading schema-0.6.7-py2.py3-none-any.whl.metadata (14 kB)\n","Downloading experta-1.9.4-py3-none-any.whl (35 kB)\n","Downloading schema-0.6.7-py2.py3-none-any.whl (14 kB)\n","Building wheels for collected packages: frozendict\n","  Building wheel for frozendict (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for frozendict: filename=frozendict-1.2-py3-none-any.whl size=3149 sha256=afcb9eb7d12b709c2278b379ed08c62d80e83cc54f7d0796581fc6b554b14072\n","  Stored in directory: /root/.cache/pip/wheels/49/ac/f8/cb8120244e710bdb479c86198b03c7b08c3c2d3d2bf448fd6e\n","Successfully built frozendict\n","Installing collected packages: schema, frozendict, experta\n","  Attempting uninstall: frozendict\n","    Found existing installation: frozendict 2.4.6\n","    Uninstalling frozendict-2.4.6:\n","      Successfully uninstalled frozendict-2.4.6\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","yfinance 0.2.55 requires frozendict>=2.3.4, but you have frozendict 1.2 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed experta-1.9.4 frozendict-1.2 schema-0.6.7\n"]}],"source":["!pip install experta"]},{"cell_type":"code","source":["!pip install --upgrade frozendict"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tSnJbBreZ2-q","executionInfo":{"status":"ok","timestamp":1744936122421,"user_tz":-420,"elapsed":5150,"user":{"displayName":"Muhamad Rizal","userId":"03040828489352447663"}},"outputId":"d0351867-ad73-4b0f-eaaa-26667800ed3d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: frozendict in /usr/local/lib/python3.11/dist-packages (1.2)\n","Collecting frozendict\n","  Downloading frozendict-2.4.6-py311-none-any.whl.metadata (23 kB)\n","Downloading frozendict-2.4.6-py311-none-any.whl (16 kB)\n","Installing collected packages: frozendict\n","  Attempting uninstall: frozendict\n","    Found existing installation: frozendict 1.2\n","    Uninstalling frozendict-1.2:\n","      Successfully uninstalled frozendict-1.2\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","experta 1.9.4 requires frozendict==1.2, but you have frozendict 2.4.6 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed frozendict-2.4.6\n"]}]},{"cell_type":"markdown","source":["code sistem pakar"],"metadata":{"id":"_ZoogLtgjWnk"}},{"cell_type":"code","source":["from experta import *\n","\n","class Diagnosis(KnowledgeEngine):\n","    @Rule(Fact(cough=True) & Fact(fever=True) & Fact(fatigue=True))\n","    def flu(self):\n","        print(\"Diagnosis: You may have the flu.\")\n","\n","    @Rule(Fact(cough=True) & Fact(fever=True) & Fact(breathing_difficulty=True))\n","    def pneumonia(self):\n","        print(\"Diagnosis: You may have pneumonia.\")\n","\n","    @Rule(Fact(sneezing=True) & Fact(runny_nose=True) & Fact(cough=True))\n","    def cold(self):\n","        print(\"Diagnosis: You may have common cold.\")\n","\n","    @Rule(Fact(sore_throat=True) & Fact(fever=True))\n","    def throat_infection(self):\n","        print(\"Diagnosis: You may have throat infection.\")\n","\n","    # Tambahan diagnosa\n","    @Rule(Fact(fatigue=True) & Fact(headache=True) & Fact(nausea=True))\n","    def migraine(self):\n","        print(\"Diagnosis: You may have a migraine.\")\n","\n","    # Tambahan diagnosa\n","    @Rule(Fact(cough=True) & Fact(wheezing=True) & Fact(breathing_difficulty=True))\n","    def asthma(self):\n","        print(\"Diagnosis: You may have asthma.\")\n","\n","    # Tambahan diagnosa\n","    @Rule(Fact(fever=True) & Fact(rash=True) & Fact(joint_pain=True))\n","    def dengue(self):\n","        print(\"Diagnosis: You may have dengue fever.\")\n","\n","    # Tambahan diagnosa\n","    @Rule(Fact(nausea=True) & Fact(vomiting=True) & Fact(stomach_pain=True))\n","    def food_poisoning(self):\n","        print(\"Diagnosis: You may have food poisoning.\")\n","\n","    @Rule(\n","        Fact(cough=False) &\n","        Fact(fever=False) &\n","        Fact(fatigue=False) &\n","        Fact(breathing_difficulty=False) &\n","        Fact(sneezing=False) &\n","        Fact(runny_nose=False) &\n","        Fact(sore_throat=False) &\n","        Fact(headache=False) &\n","        Fact(nausea=False) &\n","        Fact(wheezing=False) &\n","        Fact(rash=False) &\n","        Fact(joint_pain=False) &\n","        Fact(vomiting=False) &\n","        Fact(stomach_pain=False)\n","    )\n","    def healthy(self):\n","        print(\"Diagnosis: You seem to be healthy.\")\n","\n","def get_input():\n","    \"\"\"Helper function to get user input as boolean (yes/no).\"\"\"\n","    def ask_question(question):\n","        return input(question + \" (yes/no): \").strip().lower() == \"yes\"\n","\n","    return {\n","        \"cough\": ask_question(\"Do you have a cough?\"),\n","        \"fever\": ask_question(\"Do you have a fever?\"),\n","        \"fatigue\": ask_question(\"Do you feel fatigue?\"),\n","        \"breathing_difficulty\": ask_question(\"Do you have breathing difficulties?\"),\n","        \"sneezing\": ask_question(\"Are you sneezing?\"),\n","        \"runny_nose\": ask_question(\"Do you have a runny nose?\"),\n","        \"sore_throat\": ask_question(\"Do you have a sore throat?\"),\n","        \"headache\": ask_question(\"Do you have a headache?\"),\n","        \"nausea\": ask_question(\"Do you feel nauseous?\"),\n","        \"wheezing\": ask_question(\"Are you wheezing?\"),\n","        \"rash\": ask_question(\"Do you have a skin rash?\"),\n","        \"joint_pain\": ask_question(\"Do you have joint pain?\"),\n","        \"vomiting\": ask_question(\"Are you vomiting?\"),\n","        \"stomach_pain\": ask_question(\"Do you have stomach pain?\"),\n","    }\n","\n","# Running the expert system\n","if __name__ == \"__main__\":\n","    symptoms = get_input()\n","    engine = Diagnosis()\n","    engine.reset()\n","    for symptom, present in symptoms.items():\n","        engine.declare(Fact(**{symptom: present}))\n","    engine.run()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VkVSgidYahrB","executionInfo":{"status":"ok","timestamp":1744936140906,"user_tz":-420,"elapsed":14060,"user":{"displayName":"Muhamad Rizal","userId":"03040828489352447663"}},"outputId":"eaf60741-262c-4b6f-bf09-b0a9ce9719fe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Do you have a cough? (yes/no): No\n","Do you have a fever? (yes/no): No\n","Do you feel fatigue? (yes/no): No\n","Do you have breathing difficulties? (yes/no): No\n","Are you sneezing? (yes/no): No\n","Do you have a runny nose? (yes/no): No\n","Do you have a sore throat? (yes/no): No\n","Diagnosis: You seem to be healthy\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"4RcI2ehUl-Lc"}},{"cell_type":"code","source":["from experta import *\n","\n","class SistemPakarMedis(KnowledgeEngine):\n","\n","    @Rule(Fact(demam=True), Fact(batuk=True))\n","    def flu(self):\n","        print(\"Diagnosis: flu.\")\n","\n","    @Rule(Fact(sakit_tenggorokan=True), Fact(demam=True))\n","    def throat_infection(self):\n","        print(\"Diagnosis: radang tenggorokan\")\n","\n","    @Rule(Fact(nyeri_otot=True), Fact(nyeri_perut=True))\n","    def hernia(self):\n","        print(\"Diagnosis: hernia\")\n","\n","    @Rule(Fact(panas=True), Fact(tiris=True))\n","    def panas_tiris(self):\n","        print(\"Diagnosis: panas tiris\")\n","\n","    # Tambahan diagnosa\n","    @Rule(Fact(cough=True) & Fact(fever=True) & Fact(breathing_difficulty=True) & Fact(loss_of_taste_smell=True))\n","    def covid19(self):\n","        print(\"Diagnosis: You may have COVID-19\")\n","\n","    # Tambahan diagnosa\n","    @Rule(Fact(sneezing=True) & Fact(runny_nose=True) & Fact(itchy_eyes=True))\n","    def allergy(self):\n","        print(\"Diagnosis: You may have allergies\")\n","\n","    # Tambahan diagnosa\n","    @Rule(Fact(breathing_difficulty=True) & Fact(wheezing=True) & Fact(chest_tightness=True))\n","    def asthma(self):\n","        print(\"Diagnosis: You may have asthma\")\n","\n","    # Tambahan diagnosa\n","    @Rule(Fact(headache=True) & Fact(nausea=True) & Fact(sensitivity_to_light=True))\n","    def migraine(self):\n","        print(\"Diagnosis: You may have migraine\")\n","\n","# Running the expert system\n","engine = SistemPakarMedis()\n","engine.reset()  # Reset the knowledge engine\n","engine.declare(Fact(cough=True))\n","engine.declare(Fact(fever=True))\n","engine.declare(Fact(breathing_difficulty=True))\n","engine.declare(Fact(loss_of_taste_smell=True))  # Input symptoms\n","engine.run()  # Run the inference engine"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Sl4VcreUl-bg","executionInfo":{"status":"ok","timestamp":1744936866850,"user_tz":-420,"elapsed":52,"user":{"displayName":"Muhamad Rizal","userId":"03040828489352447663"}},"outputId":"e19f170b-778e-45f5-9d93-f6c58f296318"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Diagnosis: You may have COVID-19\n"]}]},{"cell_type":"code","source":["def forward_chaining(facts, rules):\n","  inferred = set(facts)\n","  changed = True\n","\n","  while changed:\n","    changed = False\n","    for rule in rules:\n","      if rule[\"if\"].issubset(inferred) and rule[\"then\"] not in inferred:\n","        inferred.add(rule[\"then\"])\n","        changed = True\n","\n","  return inferred\n","\n","facts = {\"has_feathers\", \"has_beak\", \"carnivore\"}\n","rules = [\n","    {\"if\": {\"has_feathers\", \"has_beak\"}, \"then\": \"is_bird\"},\n","    {\"if\": {\"lays_eggs\", \"is_bird\"}, \"then\": \"is_chicken\"},\n","    {\"if\": {\"cannot_fly\", \"is_bird\"}, \"then\": \"is_penguin\"},\n","    {\"if\": {\"carnivore\", \"is_bird\"}, \"then\": \"is_eagle\"}\n","]\n","\n","result = forward_chaining(facts, rules)\n","print(\"inferred facts: \", result)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q7sgVJNIqMHT","executionInfo":{"status":"ok","timestamp":1744340459057,"user_tz":-420,"elapsed":38,"user":{"displayName":"M.saepul Rizal","userId":"06199060073270961094"}},"outputId":"4c050139-d3ba-4d0a-d62e-9264c2e08d90"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["inferred facts:  {'has_beak', 'carnivore', 'is_bird', 'has_feathers', 'is_eagle'}\n"]}]},{"cell_type":"code","source":["def backward_chaining(goal, facts, rules):\n","  if goal in facts:\n","     return True\n","  for rule in rules:\n","    if rule[\"then\"] == goal:\n","      if all(backward_chaining(cond, facts, rules) for cond in rule[\"if\"]):\n","        return True\n","  return False\n","\n","facts = {\"likes_computers\", \"solves_problems\", \"likes_to_design\"}\n","rules = [\n","    {\"if\": {\"likes_computers\", \"solves_problems\"}, \"then\": \"should_be_engineer\"},\n","    {\"if\": {\"should_be_engineer\", \"likes_programming\"}, \"then\": \"software_engineer\"},\n","    {\"if\": {\"should_be_engineer\", \"likes_to_design\"}, \"then\": \"UI/UX_engineer\"},\n","]\n","\n","goal = \"should_be_engineer\"\n","result = backward_chaining(goal, facts, rules)\n","print(f\"is '{goal}' provable? ->\", result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f6jy7ldwuB94","executionInfo":{"status":"ok","timestamp":1744340215862,"user_tz":-420,"elapsed":9,"user":{"displayName":"M.saepul Rizal","userId":"06199060073270961094"}},"outputId":"2b73f238-816d-4c36-e5e2-c898931abf27"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["is 'should_be_engineer' provable? -> True\n"]}]},{"cell_type":"code","source":["def forward_chaining(facts, rules):\n","  inferred = set(facts)\n","  changed = True\n","\n","  while changed:\n","    changed = False\n","    for rule in rules:\n","      if rule[\"if\"].issubset(inferred) and rule[\"then\"] not in inferred:\n","        inferred.add(rule[\"then\"])\n","        changed = True\n","\n","  return inferred\n","\n","facts = {\"has_wheels\", \"has_engine\", \"has_four_wheels\"}\n","rules = [\n","    {\"if\": {\"has_wheels\", \"has_engine\"}, \"then\": \"is_vehicle\"},\n","    {\"if\": {\"is_vehicle\", \"has_two_wheels\"}, \"then\": \"is_motorcycle\"},\n","    {\"if\": {\"is_vehicle\", \"has_four_wheels\"}, \"then\": \"is_car\"},\n","]\n","\n","result = forward_chaining(facts, rules)\n","print(\"inferred facts: \", result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gXtDL9lgy1H_","executionInfo":{"status":"ok","timestamp":1744340671634,"user_tz":-420,"elapsed":24,"user":{"displayName":"M.saepul Rizal","userId":"06199060073270961094"}},"outputId":"6fa30829-98bf-4e4f-a43d-11a1d167e30b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["inferred facts:  {'is_vehicle', 'has_four_wheels', 'has_wheels', 'is_car', 'has_engine'}\n"]}]},{"cell_type":"code","source":["def backward_chaining(goal, facts, rules):\n","  if goal in facts:\n","     return True\n","  for rule in rules:\n","    if rule[\"then\"] == goal:\n","      if all(backward_chaining(cond, facts, rules) for cond in rule[\"if\"]):\n","        return True\n","  return False\n","\n","facts = {\"has_feather\", \"has_small_wings\"}\n","rules = [\n","    {\"if\": {\"is_bird\", \"cannot_fly\"}, \"then\": \"is_penguin\"},\n","    {\"if\": {\"has_feather\"}, \"then\": \"is_bird\"},\n","    {\"if\": {\"has_small_wings\"}, \"then\": \"cannot_fly\"},\n","]\n","\n","goal = \"is_penguin\"\n","result = backward_chaining(goal, facts, rules)\n","print(f\"is '{goal}' provable? ->\", result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IROKkAw-0xqt","executionInfo":{"status":"ok","timestamp":1744341198695,"user_tz":-420,"elapsed":18,"user":{"displayName":"M.saepul Rizal","userId":"06199060073270961094"}},"outputId":"86a4218e-9efa-41bc-e0f7-76b92066f7a2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["is 'is_penguin' provable? -> True\n"]}]}]}